// Code generated by MockGen. DO NOT EDIT.
// Source: swagger_test/service (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	models "swagger_test/models"
	operations "swagger_test/restapi/operations"
	todo "swagger_test/restapi/operations/todo"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockService) Configure(arg0 *operations.SwaggerAPI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", arg0)
}

// Configure indicates an expected call of Configure
func (mr *MockServiceMockRecorder) Configure(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockService)(nil).Configure), arg0)
}

// CreateTodoItem mocks base method
func (m *MockService) CreateTodoItem(arg0 *todo.CreateTodoItemParams) (models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodoItem", arg0)
	ret0, _ := ret[0].(models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodoItem indicates an expected call of CreateTodoItem
func (mr *MockServiceMockRecorder) CreateTodoItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodoItem", reflect.TypeOf((*MockService)(nil).CreateTodoItem), arg0)
}

// DeleteTodoItem mocks base method
func (m *MockService) DeleteTodoItem(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodoItem", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodoItem indicates an expected call of DeleteTodoItem
func (mr *MockServiceMockRecorder) DeleteTodoItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodoItem", reflect.TypeOf((*MockService)(nil).DeleteTodoItem), arg0)
}

// FetchTodoItem mocks base method
func (m *MockService) FetchTodoItem(arg0 int64) (*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTodoItem", arg0)
	ret0, _ := ret[0].(*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTodoItem indicates an expected call of FetchTodoItem
func (mr *MockServiceMockRecorder) FetchTodoItem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTodoItem", reflect.TypeOf((*MockService)(nil).FetchTodoItem), arg0)
}

// FetchTodoItems mocks base method
func (m *MockService) FetchTodoItems() []*models.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTodoItems")
	ret0, _ := ret[0].([]*models.Item)
	return ret0
}

// FetchTodoItems indicates an expected call of FetchTodoItems
func (mr *MockServiceMockRecorder) FetchTodoItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTodoItems", reflect.TypeOf((*MockService)(nil).FetchTodoItems))
}

// ReplaceTodoItem mocks base method
func (m *MockService) ReplaceTodoItem(arg0 int64, arg1 *todo.ReplaceTodoItemParams) (models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceTodoItem", arg0, arg1)
	ret0, _ := ret[0].(models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplaceTodoItem indicates an expected call of ReplaceTodoItem
func (mr *MockServiceMockRecorder) ReplaceTodoItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceTodoItem", reflect.TypeOf((*MockService)(nil).ReplaceTodoItem), arg0, arg1)
}
